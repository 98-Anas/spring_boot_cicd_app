stages:
  - build
  - package
  - test
  - security_scan
  - deploy

variables:
  DOCKER_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .m2/repository
    - target/

# Stage 1: Build Java application
build:
  stage: build
  image: maven:3.9.6-eclipse-temurin-17
  script:
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - target/
  tags:
    - dockerExec

# Stage 2: Package into Docker image (runs parallel with test)
package:
  stage: package
  needs: ["build"]
  image: docker:24.0
  services:
    - docker:24.0-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_TAG .
    - docker push $DOCKER_TAG
  tags:
    - dockerExec

# Stage 3: Run tests (runs parallel with package)
test:
  stage: test
  needs: ["build"]
  image: maven:3.9.6-eclipse-temurin-17
  script:
    - mvn test
  tags:
    - dockerExec

# Stage 4: Security scans (run in parallel)
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml

sast:
  stage: security_scan
  needs: ["package"]
  variables:
    SAST_EXCLUDED_ANALYZERS: "brakeman,nodejs-scan,eslint,gosec,flawfinder,security-code-scan"
  tags:
    - dockerExec

dependency_scan:
  stage: security_scan
  needs: ["build"]
  image: owasp/dependency-check:latest
  script:
    - dependency-check.sh --project "$CI_PROJECT_NAME" --scan . --format "ALL"
  artifacts:
    when: always
    paths:
      - dependency-check-report.html
  allow_failure: true
  tags:
    - dockerExec

container_scanning:
  stage: security_scan
  needs: ["package"]
  variables:
    CS_IMAGE: $DOCKER_TAG
  tags:
    - dockerExec

# Stage 5: Deployment
deploy:
  stage: deploy
  needs:
    - job: test
    - job: sast
    - job: container_scanning
  image: docker:24.0
  services:
    - docker:24.0-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $DOCKER_TAG
    - docker tag $DOCKER_TAG $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker stop myapp || true
    - docker rm myapp || true
    - docker run -d --name myapp -p 8080:8080 $CI_REGISTRY_IMAGE:latest
  only:
    - main
  tags:
    - dockerExec